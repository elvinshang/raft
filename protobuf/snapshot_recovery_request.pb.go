// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: snapshot_recovery_request.proto

package protobuf

import (
	bytes "bytes"
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	github_com_golang_protobuf_proto "github.com/golang/protobuf/proto"
	proto "github.com/golang/protobuf/proto"
	io "io"
	math "math"
	reflect "reflect"
	strings "strings"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type SnapshotRecoveryRequest struct {
	LeaderName           *string                         `protobuf:"bytes,1,req,name=LeaderName" json:"LeaderName,omitempty"`
	LastIndex            *uint64                         `protobuf:"varint,2,req,name=LastIndex" json:"LastIndex,omitempty"`
	LastTerm             *uint64                         `protobuf:"varint,3,req,name=LastTerm" json:"LastTerm,omitempty"`
	Peers                []*SnapshotRecoveryRequest_Peer `protobuf:"bytes,4,rep,name=Peers" json:"Peers,omitempty"`
	State                []byte                          `protobuf:"bytes,5,req,name=State" json:"State,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                        `json:"-"`
	XXX_unrecognized     []byte                          `json:"-"`
	XXX_sizecache        int32                           `json:"-"`
}

func (m *SnapshotRecoveryRequest) Reset()      { *m = SnapshotRecoveryRequest{} }
func (*SnapshotRecoveryRequest) ProtoMessage() {}
func (*SnapshotRecoveryRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_b49f675faa8996bc, []int{0}
}
func (m *SnapshotRecoveryRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SnapshotRecoveryRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SnapshotRecoveryRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SnapshotRecoveryRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SnapshotRecoveryRequest.Merge(m, src)
}
func (m *SnapshotRecoveryRequest) XXX_Size() int {
	return m.Size()
}
func (m *SnapshotRecoveryRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_SnapshotRecoveryRequest.DiscardUnknown(m)
}

var xxx_messageInfo_SnapshotRecoveryRequest proto.InternalMessageInfo

func (m *SnapshotRecoveryRequest) GetLeaderName() string {
	if m != nil && m.LeaderName != nil {
		return *m.LeaderName
	}
	return ""
}

func (m *SnapshotRecoveryRequest) GetLastIndex() uint64 {
	if m != nil && m.LastIndex != nil {
		return *m.LastIndex
	}
	return 0
}

func (m *SnapshotRecoveryRequest) GetLastTerm() uint64 {
	if m != nil && m.LastTerm != nil {
		return *m.LastTerm
	}
	return 0
}

func (m *SnapshotRecoveryRequest) GetPeers() []*SnapshotRecoveryRequest_Peer {
	if m != nil {
		return m.Peers
	}
	return nil
}

func (m *SnapshotRecoveryRequest) GetState() []byte {
	if m != nil {
		return m.State
	}
	return nil
}

type SnapshotRecoveryRequest_Peer struct {
	Name                 *string  `protobuf:"bytes,1,req,name=Name" json:"Name,omitempty"`
	ConnectionString     *string  `protobuf:"bytes,2,req,name=ConnectionString" json:"ConnectionString,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SnapshotRecoveryRequest_Peer) Reset()      { *m = SnapshotRecoveryRequest_Peer{} }
func (*SnapshotRecoveryRequest_Peer) ProtoMessage() {}
func (*SnapshotRecoveryRequest_Peer) Descriptor() ([]byte, []int) {
	return fileDescriptor_b49f675faa8996bc, []int{0, 0}
}
func (m *SnapshotRecoveryRequest_Peer) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SnapshotRecoveryRequest_Peer) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SnapshotRecoveryRequest_Peer.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SnapshotRecoveryRequest_Peer) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SnapshotRecoveryRequest_Peer.Merge(m, src)
}
func (m *SnapshotRecoveryRequest_Peer) XXX_Size() int {
	return m.Size()
}
func (m *SnapshotRecoveryRequest_Peer) XXX_DiscardUnknown() {
	xxx_messageInfo_SnapshotRecoveryRequest_Peer.DiscardUnknown(m)
}

var xxx_messageInfo_SnapshotRecoveryRequest_Peer proto.InternalMessageInfo

func (m *SnapshotRecoveryRequest_Peer) GetName() string {
	if m != nil && m.Name != nil {
		return *m.Name
	}
	return ""
}

func (m *SnapshotRecoveryRequest_Peer) GetConnectionString() string {
	if m != nil && m.ConnectionString != nil {
		return *m.ConnectionString
	}
	return ""
}

func init() {
	proto.RegisterType((*SnapshotRecoveryRequest)(nil), "protobuf.SnapshotRecoveryRequest")
	proto.RegisterType((*SnapshotRecoveryRequest_Peer)(nil), "protobuf.SnapshotRecoveryRequest.Peer")
}

func init() { proto.RegisterFile("snapshot_recovery_request.proto", fileDescriptor_b49f675faa8996bc) }

var fileDescriptor_b49f675faa8996bc = []byte{
	// 306 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x92, 0x2f, 0xce, 0x4b, 0x2c,
	0x28, 0xce, 0xc8, 0x2f, 0x89, 0x2f, 0x4a, 0x4d, 0xce, 0x2f, 0x4b, 0x2d, 0xaa, 0x8c, 0x2f, 0x4a,
	0x2d, 0x2c, 0x4d, 0x2d, 0x2e, 0xd1, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0xe2, 0x00, 0x53, 0x49,
	0xa5, 0x69, 0x52, 0xba, 0xe9, 0x99, 0x25, 0x19, 0xa5, 0x49, 0x7a, 0xc9, 0xf9, 0xb9, 0xfa, 0xe9,
	0xf9, 0xe9, 0xf9, 0xfa, 0x30, 0x19, 0x30, 0x0f, 0xcc, 0x01, 0xb3, 0x20, 0x1a, 0x95, 0xfa, 0x99,
	0xb8, 0xc4, 0x83, 0xa1, 0x86, 0x07, 0x41, 0xcd, 0x0e, 0x82, 0x18, 0x2d, 0x24, 0xc7, 0xc5, 0xe5,
	0x93, 0x9a, 0x98, 0x92, 0x5a, 0xe4, 0x97, 0x98, 0x9b, 0x2a, 0xc1, 0xa8, 0xc0, 0xa4, 0xc1, 0x19,
	0x84, 0x24, 0x22, 0x24, 0xc3, 0xc5, 0xe9, 0x93, 0x58, 0x5c, 0xe2, 0x99, 0x97, 0x92, 0x5a, 0x21,
	0xc1, 0xa4, 0xc0, 0xa4, 0xc1, 0x12, 0x84, 0x10, 0x10, 0x92, 0xe2, 0xe2, 0x00, 0x71, 0x42, 0x52,
	0x8b, 0x72, 0x25, 0x98, 0xc1, 0x92, 0x70, 0xbe, 0x90, 0x0d, 0x17, 0x6b, 0x40, 0x6a, 0x6a, 0x51,
	0xb1, 0x04, 0x8b, 0x02, 0xb3, 0x06, 0xb7, 0x91, 0x9a, 0x1e, 0xcc, 0x91, 0x7a, 0x38, 0xdc, 0xa2,
	0x07, 0x52, 0x1e, 0x04, 0xd1, 0x24, 0x24, 0xc2, 0xc5, 0x1a, 0x5c, 0x92, 0x58, 0x92, 0x2a, 0xc1,
	0xaa, 0xc0, 0xa4, 0xc1, 0x13, 0x04, 0xe1, 0x48, 0xb9, 0x71, 0xb1, 0x80, 0xa4, 0x85, 0x84, 0xb8,
	0x58, 0x90, 0xdc, 0x0b, 0x66, 0x0b, 0x69, 0x71, 0x09, 0x38, 0xe7, 0xe7, 0xe5, 0xa5, 0x26, 0x97,
	0x64, 0xe6, 0xe7, 0x05, 0x97, 0x14, 0x65, 0xe6, 0xa5, 0x83, 0x1d, 0xcc, 0x19, 0x84, 0x21, 0xee,
	0x64, 0x70, 0xe3, 0xa1, 0x1c, 0xc3, 0x83, 0x87, 0x72, 0x8c, 0x1f, 0x1e, 0xca, 0x31, 0xfe, 0x78,
	0x28, 0xc7, 0xd8, 0xf0, 0x48, 0x8e, 0x71, 0xc5, 0x23, 0x39, 0xc6, 0x1d, 0x8f, 0xe4, 0x18, 0x0f,
	0x3c, 0x92, 0x63, 0x3c, 0xf1, 0x48, 0x8e, 0xf1, 0xc2, 0x23, 0x39, 0xc6, 0x07, 0x8f, 0xe4, 0x18,
	0x67, 0x3c, 0x96, 0x63, 0x00, 0x04, 0x00, 0x00, 0xff, 0xff, 0x76, 0x36, 0x3b, 0xcc, 0x9e, 0x01,
	0x00, 0x00,
}

func (this *SnapshotRecoveryRequest) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*SnapshotRecoveryRequest)
	if !ok {
		that2, ok := that.(SnapshotRecoveryRequest)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *SnapshotRecoveryRequest")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *SnapshotRecoveryRequest but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *SnapshotRecoveryRequest but is not nil && this == nil")
	}
	if this.LeaderName != nil && that1.LeaderName != nil {
		if *this.LeaderName != *that1.LeaderName {
			return fmt.Errorf("LeaderName this(%v) Not Equal that(%v)", *this.LeaderName, *that1.LeaderName)
		}
	} else if this.LeaderName != nil {
		return fmt.Errorf("this.LeaderName == nil && that.LeaderName != nil")
	} else if that1.LeaderName != nil {
		return fmt.Errorf("LeaderName this(%v) Not Equal that(%v)", this.LeaderName, that1.LeaderName)
	}
	if this.LastIndex != nil && that1.LastIndex != nil {
		if *this.LastIndex != *that1.LastIndex {
			return fmt.Errorf("LastIndex this(%v) Not Equal that(%v)", *this.LastIndex, *that1.LastIndex)
		}
	} else if this.LastIndex != nil {
		return fmt.Errorf("this.LastIndex == nil && that.LastIndex != nil")
	} else if that1.LastIndex != nil {
		return fmt.Errorf("LastIndex this(%v) Not Equal that(%v)", this.LastIndex, that1.LastIndex)
	}
	if this.LastTerm != nil && that1.LastTerm != nil {
		if *this.LastTerm != *that1.LastTerm {
			return fmt.Errorf("LastTerm this(%v) Not Equal that(%v)", *this.LastTerm, *that1.LastTerm)
		}
	} else if this.LastTerm != nil {
		return fmt.Errorf("this.LastTerm == nil && that.LastTerm != nil")
	} else if that1.LastTerm != nil {
		return fmt.Errorf("LastTerm this(%v) Not Equal that(%v)", this.LastTerm, that1.LastTerm)
	}
	if len(this.Peers) != len(that1.Peers) {
		return fmt.Errorf("Peers this(%v) Not Equal that(%v)", len(this.Peers), len(that1.Peers))
	}
	for i := range this.Peers {
		if !this.Peers[i].Equal(that1.Peers[i]) {
			return fmt.Errorf("Peers this[%v](%v) Not Equal that[%v](%v)", i, this.Peers[i], i, that1.Peers[i])
		}
	}
	if !bytes.Equal(this.State, that1.State) {
		return fmt.Errorf("State this(%v) Not Equal that(%v)", this.State, that1.State)
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return fmt.Errorf("XXX_unrecognized this(%v) Not Equal that(%v)", this.XXX_unrecognized, that1.XXX_unrecognized)
	}
	return nil
}
func (this *SnapshotRecoveryRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*SnapshotRecoveryRequest)
	if !ok {
		that2, ok := that.(SnapshotRecoveryRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.LeaderName != nil && that1.LeaderName != nil {
		if *this.LeaderName != *that1.LeaderName {
			return false
		}
	} else if this.LeaderName != nil {
		return false
	} else if that1.LeaderName != nil {
		return false
	}
	if this.LastIndex != nil && that1.LastIndex != nil {
		if *this.LastIndex != *that1.LastIndex {
			return false
		}
	} else if this.LastIndex != nil {
		return false
	} else if that1.LastIndex != nil {
		return false
	}
	if this.LastTerm != nil && that1.LastTerm != nil {
		if *this.LastTerm != *that1.LastTerm {
			return false
		}
	} else if this.LastTerm != nil {
		return false
	} else if that1.LastTerm != nil {
		return false
	}
	if len(this.Peers) != len(that1.Peers) {
		return false
	}
	for i := range this.Peers {
		if !this.Peers[i].Equal(that1.Peers[i]) {
			return false
		}
	}
	if !bytes.Equal(this.State, that1.State) {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *SnapshotRecoveryRequest_Peer) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*SnapshotRecoveryRequest_Peer)
	if !ok {
		that2, ok := that.(SnapshotRecoveryRequest_Peer)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *SnapshotRecoveryRequest_Peer")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *SnapshotRecoveryRequest_Peer but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *SnapshotRecoveryRequest_Peer but is not nil && this == nil")
	}
	if this.Name != nil && that1.Name != nil {
		if *this.Name != *that1.Name {
			return fmt.Errorf("Name this(%v) Not Equal that(%v)", *this.Name, *that1.Name)
		}
	} else if this.Name != nil {
		return fmt.Errorf("this.Name == nil && that.Name != nil")
	} else if that1.Name != nil {
		return fmt.Errorf("Name this(%v) Not Equal that(%v)", this.Name, that1.Name)
	}
	if this.ConnectionString != nil && that1.ConnectionString != nil {
		if *this.ConnectionString != *that1.ConnectionString {
			return fmt.Errorf("ConnectionString this(%v) Not Equal that(%v)", *this.ConnectionString, *that1.ConnectionString)
		}
	} else if this.ConnectionString != nil {
		return fmt.Errorf("this.ConnectionString == nil && that.ConnectionString != nil")
	} else if that1.ConnectionString != nil {
		return fmt.Errorf("ConnectionString this(%v) Not Equal that(%v)", this.ConnectionString, that1.ConnectionString)
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return fmt.Errorf("XXX_unrecognized this(%v) Not Equal that(%v)", this.XXX_unrecognized, that1.XXX_unrecognized)
	}
	return nil
}
func (this *SnapshotRecoveryRequest_Peer) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*SnapshotRecoveryRequest_Peer)
	if !ok {
		that2, ok := that.(SnapshotRecoveryRequest_Peer)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Name != nil && that1.Name != nil {
		if *this.Name != *that1.Name {
			return false
		}
	} else if this.Name != nil {
		return false
	} else if that1.Name != nil {
		return false
	}
	if this.ConnectionString != nil && that1.ConnectionString != nil {
		if *this.ConnectionString != *that1.ConnectionString {
			return false
		}
	} else if this.ConnectionString != nil {
		return false
	} else if that1.ConnectionString != nil {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *SnapshotRecoveryRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 9)
	s = append(s, "&protobuf.SnapshotRecoveryRequest{")
	if this.LeaderName != nil {
		s = append(s, "LeaderName: "+valueToGoStringSnapshotRecoveryRequest(this.LeaderName, "string")+",\n")
	}
	if this.LastIndex != nil {
		s = append(s, "LastIndex: "+valueToGoStringSnapshotRecoveryRequest(this.LastIndex, "uint64")+",\n")
	}
	if this.LastTerm != nil {
		s = append(s, "LastTerm: "+valueToGoStringSnapshotRecoveryRequest(this.LastTerm, "uint64")+",\n")
	}
	if this.Peers != nil {
		s = append(s, "Peers: "+fmt.Sprintf("%#v", this.Peers)+",\n")
	}
	if this.State != nil {
		s = append(s, "State: "+valueToGoStringSnapshotRecoveryRequest(this.State, "byte")+",\n")
	}
	if this.XXX_unrecognized != nil {
		s = append(s, "XXX_unrecognized:"+fmt.Sprintf("%#v", this.XXX_unrecognized)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *SnapshotRecoveryRequest_Peer) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&protobuf.SnapshotRecoveryRequest_Peer{")
	if this.Name != nil {
		s = append(s, "Name: "+valueToGoStringSnapshotRecoveryRequest(this.Name, "string")+",\n")
	}
	if this.ConnectionString != nil {
		s = append(s, "ConnectionString: "+valueToGoStringSnapshotRecoveryRequest(this.ConnectionString, "string")+",\n")
	}
	if this.XXX_unrecognized != nil {
		s = append(s, "XXX_unrecognized:"+fmt.Sprintf("%#v", this.XXX_unrecognized)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringSnapshotRecoveryRequest(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}
func (m *SnapshotRecoveryRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SnapshotRecoveryRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.LeaderName == nil {
		return 0, new(github_com_golang_protobuf_proto.RequiredNotSetError)
	} else {
		dAtA[i] = 0xa
		i++
		i = encodeVarintSnapshotRecoveryRequest(dAtA, i, uint64(len(*m.LeaderName)))
		i += copy(dAtA[i:], *m.LeaderName)
	}
	if m.LastIndex == nil {
		return 0, new(github_com_golang_protobuf_proto.RequiredNotSetError)
	} else {
		dAtA[i] = 0x10
		i++
		i = encodeVarintSnapshotRecoveryRequest(dAtA, i, uint64(*m.LastIndex))
	}
	if m.LastTerm == nil {
		return 0, new(github_com_golang_protobuf_proto.RequiredNotSetError)
	} else {
		dAtA[i] = 0x18
		i++
		i = encodeVarintSnapshotRecoveryRequest(dAtA, i, uint64(*m.LastTerm))
	}
	if len(m.Peers) > 0 {
		for _, msg := range m.Peers {
			dAtA[i] = 0x22
			i++
			i = encodeVarintSnapshotRecoveryRequest(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.State == nil {
		return 0, new(github_com_golang_protobuf_proto.RequiredNotSetError)
	} else {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintSnapshotRecoveryRequest(dAtA, i, uint64(len(m.State)))
		i += copy(dAtA[i:], m.State)
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *SnapshotRecoveryRequest_Peer) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SnapshotRecoveryRequest_Peer) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Name == nil {
		return 0, new(github_com_golang_protobuf_proto.RequiredNotSetError)
	} else {
		dAtA[i] = 0xa
		i++
		i = encodeVarintSnapshotRecoveryRequest(dAtA, i, uint64(len(*m.Name)))
		i += copy(dAtA[i:], *m.Name)
	}
	if m.ConnectionString == nil {
		return 0, new(github_com_golang_protobuf_proto.RequiredNotSetError)
	} else {
		dAtA[i] = 0x12
		i++
		i = encodeVarintSnapshotRecoveryRequest(dAtA, i, uint64(len(*m.ConnectionString)))
		i += copy(dAtA[i:], *m.ConnectionString)
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func encodeVarintSnapshotRecoveryRequest(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func NewPopulatedSnapshotRecoveryRequest(r randySnapshotRecoveryRequest, easy bool) *SnapshotRecoveryRequest {
	this := &SnapshotRecoveryRequest{}
	v1 := string(randStringSnapshotRecoveryRequest(r))
	this.LeaderName = &v1
	v2 := uint64(uint64(r.Uint32()))
	this.LastIndex = &v2
	v3 := uint64(uint64(r.Uint32()))
	this.LastTerm = &v3
	if r.Intn(10) != 0 {
		v4 := r.Intn(5)
		this.Peers = make([]*SnapshotRecoveryRequest_Peer, v4)
		for i := 0; i < v4; i++ {
			this.Peers[i] = NewPopulatedSnapshotRecoveryRequest_Peer(r, easy)
		}
	}
	v5 := r.Intn(100)
	this.State = make([]byte, v5)
	for i := 0; i < v5; i++ {
		this.State[i] = byte(r.Intn(256))
	}
	if !easy && r.Intn(10) != 0 {
		this.XXX_unrecognized = randUnrecognizedSnapshotRecoveryRequest(r, 6)
	}
	return this
}

func NewPopulatedSnapshotRecoveryRequest_Peer(r randySnapshotRecoveryRequest, easy bool) *SnapshotRecoveryRequest_Peer {
	this := &SnapshotRecoveryRequest_Peer{}
	v6 := string(randStringSnapshotRecoveryRequest(r))
	this.Name = &v6
	v7 := string(randStringSnapshotRecoveryRequest(r))
	this.ConnectionString = &v7
	if !easy && r.Intn(10) != 0 {
		this.XXX_unrecognized = randUnrecognizedSnapshotRecoveryRequest(r, 3)
	}
	return this
}

type randySnapshotRecoveryRequest interface {
	Float32() float32
	Float64() float64
	Int63() int64
	Int31() int32
	Uint32() uint32
	Intn(n int) int
}

func randUTF8RuneSnapshotRecoveryRequest(r randySnapshotRecoveryRequest) rune {
	ru := r.Intn(62)
	if ru < 10 {
		return rune(ru + 48)
	} else if ru < 36 {
		return rune(ru + 55)
	}
	return rune(ru + 61)
}
func randStringSnapshotRecoveryRequest(r randySnapshotRecoveryRequest) string {
	v8 := r.Intn(100)
	tmps := make([]rune, v8)
	for i := 0; i < v8; i++ {
		tmps[i] = randUTF8RuneSnapshotRecoveryRequest(r)
	}
	return string(tmps)
}
func randUnrecognizedSnapshotRecoveryRequest(r randySnapshotRecoveryRequest, maxFieldNumber int) (dAtA []byte) {
	l := r.Intn(5)
	for i := 0; i < l; i++ {
		wire := r.Intn(4)
		if wire == 3 {
			wire = 5
		}
		fieldNumber := maxFieldNumber + r.Intn(100)
		dAtA = randFieldSnapshotRecoveryRequest(dAtA, r, fieldNumber, wire)
	}
	return dAtA
}
func randFieldSnapshotRecoveryRequest(dAtA []byte, r randySnapshotRecoveryRequest, fieldNumber int, wire int) []byte {
	key := uint32(fieldNumber)<<3 | uint32(wire)
	switch wire {
	case 0:
		dAtA = encodeVarintPopulateSnapshotRecoveryRequest(dAtA, uint64(key))
		v9 := r.Int63()
		if r.Intn(2) == 0 {
			v9 *= -1
		}
		dAtA = encodeVarintPopulateSnapshotRecoveryRequest(dAtA, uint64(v9))
	case 1:
		dAtA = encodeVarintPopulateSnapshotRecoveryRequest(dAtA, uint64(key))
		dAtA = append(dAtA, byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)))
	case 2:
		dAtA = encodeVarintPopulateSnapshotRecoveryRequest(dAtA, uint64(key))
		ll := r.Intn(100)
		dAtA = encodeVarintPopulateSnapshotRecoveryRequest(dAtA, uint64(ll))
		for j := 0; j < ll; j++ {
			dAtA = append(dAtA, byte(r.Intn(256)))
		}
	default:
		dAtA = encodeVarintPopulateSnapshotRecoveryRequest(dAtA, uint64(key))
		dAtA = append(dAtA, byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)))
	}
	return dAtA
}
func encodeVarintPopulateSnapshotRecoveryRequest(dAtA []byte, v uint64) []byte {
	for v >= 1<<7 {
		dAtA = append(dAtA, uint8(uint64(v)&0x7f|0x80))
		v >>= 7
	}
	dAtA = append(dAtA, uint8(v))
	return dAtA
}
func (m *SnapshotRecoveryRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.LeaderName != nil {
		l = len(*m.LeaderName)
		n += 1 + l + sovSnapshotRecoveryRequest(uint64(l))
	}
	if m.LastIndex != nil {
		n += 1 + sovSnapshotRecoveryRequest(uint64(*m.LastIndex))
	}
	if m.LastTerm != nil {
		n += 1 + sovSnapshotRecoveryRequest(uint64(*m.LastTerm))
	}
	if len(m.Peers) > 0 {
		for _, e := range m.Peers {
			l = e.Size()
			n += 1 + l + sovSnapshotRecoveryRequest(uint64(l))
		}
	}
	if m.State != nil {
		l = len(m.State)
		n += 1 + l + sovSnapshotRecoveryRequest(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *SnapshotRecoveryRequest_Peer) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Name != nil {
		l = len(*m.Name)
		n += 1 + l + sovSnapshotRecoveryRequest(uint64(l))
	}
	if m.ConnectionString != nil {
		l = len(*m.ConnectionString)
		n += 1 + l + sovSnapshotRecoveryRequest(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovSnapshotRecoveryRequest(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozSnapshotRecoveryRequest(x uint64) (n int) {
	return sovSnapshotRecoveryRequest(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *SnapshotRecoveryRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&SnapshotRecoveryRequest{`,
		`LeaderName:` + valueToStringSnapshotRecoveryRequest(this.LeaderName) + `,`,
		`LastIndex:` + valueToStringSnapshotRecoveryRequest(this.LastIndex) + `,`,
		`LastTerm:` + valueToStringSnapshotRecoveryRequest(this.LastTerm) + `,`,
		`Peers:` + strings.Replace(fmt.Sprintf("%v", this.Peers), "SnapshotRecoveryRequest_Peer", "SnapshotRecoveryRequest_Peer", 1) + `,`,
		`State:` + valueToStringSnapshotRecoveryRequest(this.State) + `,`,
		`XXX_unrecognized:` + fmt.Sprintf("%v", this.XXX_unrecognized) + `,`,
		`}`,
	}, "")
	return s
}
func (this *SnapshotRecoveryRequest_Peer) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&SnapshotRecoveryRequest_Peer{`,
		`Name:` + valueToStringSnapshotRecoveryRequest(this.Name) + `,`,
		`ConnectionString:` + valueToStringSnapshotRecoveryRequest(this.ConnectionString) + `,`,
		`XXX_unrecognized:` + fmt.Sprintf("%v", this.XXX_unrecognized) + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringSnapshotRecoveryRequest(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *SnapshotRecoveryRequest) Unmarshal(dAtA []byte) error {
	var hasFields [1]uint64
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSnapshotRecoveryRequest
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SnapshotRecoveryRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SnapshotRecoveryRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LeaderName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSnapshotRecoveryRequest
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSnapshotRecoveryRequest
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSnapshotRecoveryRequest
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.LeaderName = &s
			iNdEx = postIndex
			hasFields[0] |= uint64(0x00000001)
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LastIndex", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSnapshotRecoveryRequest
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.LastIndex = &v
			hasFields[0] |= uint64(0x00000002)
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LastTerm", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSnapshotRecoveryRequest
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.LastTerm = &v
			hasFields[0] |= uint64(0x00000004)
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Peers", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSnapshotRecoveryRequest
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSnapshotRecoveryRequest
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSnapshotRecoveryRequest
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Peers = append(m.Peers, &SnapshotRecoveryRequest_Peer{})
			if err := m.Peers[len(m.Peers)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field State", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSnapshotRecoveryRequest
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthSnapshotRecoveryRequest
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthSnapshotRecoveryRequest
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.State = append(m.State[:0], dAtA[iNdEx:postIndex]...)
			if m.State == nil {
				m.State = []byte{}
			}
			iNdEx = postIndex
			hasFields[0] |= uint64(0x00000008)
		default:
			iNdEx = preIndex
			skippy, err := skipSnapshotRecoveryRequest(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSnapshotRecoveryRequest
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSnapshotRecoveryRequest
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}
	if hasFields[0]&uint64(0x00000001) == 0 {
		return new(github_com_golang_protobuf_proto.RequiredNotSetError)
	}
	if hasFields[0]&uint64(0x00000002) == 0 {
		return new(github_com_golang_protobuf_proto.RequiredNotSetError)
	}
	if hasFields[0]&uint64(0x00000004) == 0 {
		return new(github_com_golang_protobuf_proto.RequiredNotSetError)
	}
	if hasFields[0]&uint64(0x00000008) == 0 {
		return new(github_com_golang_protobuf_proto.RequiredNotSetError)
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SnapshotRecoveryRequest_Peer) Unmarshal(dAtA []byte) error {
	var hasFields [1]uint64
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSnapshotRecoveryRequest
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Peer: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Peer: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSnapshotRecoveryRequest
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSnapshotRecoveryRequest
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSnapshotRecoveryRequest
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Name = &s
			iNdEx = postIndex
			hasFields[0] |= uint64(0x00000001)
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ConnectionString", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSnapshotRecoveryRequest
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSnapshotRecoveryRequest
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSnapshotRecoveryRequest
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.ConnectionString = &s
			iNdEx = postIndex
			hasFields[0] |= uint64(0x00000002)
		default:
			iNdEx = preIndex
			skippy, err := skipSnapshotRecoveryRequest(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSnapshotRecoveryRequest
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSnapshotRecoveryRequest
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}
	if hasFields[0]&uint64(0x00000001) == 0 {
		return new(github_com_golang_protobuf_proto.RequiredNotSetError)
	}
	if hasFields[0]&uint64(0x00000002) == 0 {
		return new(github_com_golang_protobuf_proto.RequiredNotSetError)
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipSnapshotRecoveryRequest(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowSnapshotRecoveryRequest
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowSnapshotRecoveryRequest
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowSnapshotRecoveryRequest
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthSnapshotRecoveryRequest
			}
			iNdEx += length
			if iNdEx < 0 {
				return 0, ErrInvalidLengthSnapshotRecoveryRequest
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowSnapshotRecoveryRequest
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipSnapshotRecoveryRequest(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
				if iNdEx < 0 {
					return 0, ErrInvalidLengthSnapshotRecoveryRequest
				}
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthSnapshotRecoveryRequest = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowSnapshotRecoveryRequest   = fmt.Errorf("proto: integer overflow")
)
